'use strict';

import {expect} from 'chai';
import {describe, it} from 'mocha';

import {getFieldsExtractor, doRequest} from './tools';
import {getSorter} from '../../../src/tools/functions';

import { createApp } from '../../../src/app.js';

import jsonStarships from '../../../data/starships.json';
const expectedStarships = jsonStarships.sort(getSorter('name'));

let app;
describe('Starships tests suite', function() {
	before(function(done) {
		createApp().then(
			(_app)  => { app = _app; done();},
			(err) => { done(err); }
		);
	});
	describe('Starship list tests suite', function() {
		it('List should be in alphabetical order along with valid data', function(done) {
			doRequest(app, '{starships{name,model,starship_class,manufacturer,cost_in_credits,length,crew,passengers,max_atmosphering_speed,hyperdrive_rating,MGLT,cargo_capacity,consumables}}')
				.checkOKResponse(({starships: actualResult}) => {
					const extractor = getFieldsExtractor('name','model','starship_class','manufacturer','cost_in_credits','length','crew','passengers','max_atmosphering_speed','hyperdrive_rating','MGLT','cargo_capacity','consumables');
					const expectedResult = expectedStarships.map(extractor);
					expect(actualResult).to.be.deep.equal(expectedResult);
				})
				.end(done);
		});
	});
	describe('Starships by name test suite', function() {
		it('Should get a starship based on his name', function(done) {
			doRequest(app, '{starshipByName(name:"A-wing"){name}}')
				.checkOKResponse(({starshipByName: actualResult}) => {
					expect(actualResult.length).to.be.deep.equal(1);
					const extractor = getFieldsExtractor('name');
					const expectedResult = extractor(expectedStarships[0]);
					expect(actualResult[0]).to.be.deep.equal(expectedResult);
				})
				.end(done);
		});
		it('Should get a starship based on an extract of his name', function(done) {
			doRequest(app, '{starshipByName(name:"a-WiN"){name}}')
				.checkOKResponse(({starshipByName: actualResult}) => {
					expect(actualResult.length).to.be.deep.equal(1);
					const extractor = getFieldsExtractor('name');
					const expectedResult = extractor(expectedStarships[0]);
					expect(actualResult[0]).to.be.deep.equal(expectedResult);
				})
				.end(done);
		});
		it('Should get an empty list when ask for a dummy name', function(done) {
			doRequest(app, '{starshipByName(name:"donald ship"){name}}')
				.checkOKResponse(({starshipByName: actualResult}) => {
					expect(actualResult.length).to.be.deep.equal(0);
				})
				.end(done);
		});
		it('Should get an error when providing an invalid name', function(done) {
			doRequest(app, '{starshipByName(name{name}}')
				.expect(200)
				.expect((response) => {
					expect(response.body.data).to.be.null;
					expect(response.body.errors).not.to.be.undefined;
				})
				.end(done);
		});
	});
});
