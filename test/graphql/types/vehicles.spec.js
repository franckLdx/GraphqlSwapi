'use strict';

import {expect} from 'chai';
import {describe, it} from 'mocha';

import {getFieldsExtractor, doRequest} from './tools';
import {getSorter} from '../../../src/tools/functions';

import { createApp } from '../../../src/app.js';

import jsonVehicles from '../../../data/vehicles.json';
const expectedVehicles = jsonVehicles.sort(getSorter('name'));

let app;
describe('Vehicles tests suite', function() {
	before(function(done) {
		createApp().then(
			(_app)  => { app = _app; done();},
			(err) => { done(err); }
		);
	});
	describe('Vehicles list tests suite', function() {
		it('List should be in alphabetical order along with valid data', function(done) {
			doRequest(app, '{vehicles{name,model,vehicle_class,manufacturer,length,cost_in_credits,crew,passengers,max_atmosphering_speed,cargo_capacity,consumables}}')
				.expect(200)
				.expect((response) => {
					const extractor = getFieldsExtractor('name','model','vehicle_class','manufacturer','length','cost_in_credits','crew','passengers','max_atmosphering_speed','cargo_capacity','consumables');
					const expectedResult = expectedVehicles.map(extractor);
					const actualResult = response.body.data.vehicles;
					expect(actualResult).to.be.deep.equal(expectedResult);
					expect(response.body.errors).to.be.undefined;
				})
				.end(done);
		});
	});
	describe('Vehicles by name test suite', function() {
		it('Should get a starship based on his name', function(done) {
			doRequest(app, '{vehicleByName(name:"AT-AT"){name}}')
				.expect(200)
				.expect((response) => {
					expect(response.body.data.vehicleByName.length).to.be.deep.equal(1);
					const extractor = getFieldsExtractor('name');
					const expectedResult = extractor(expectedVehicles[0]);
					const actualResult = response.body.data.vehicleByName[0];
					expect(actualResult).to.be.deep.equal(expectedResult);
					expect(response.body.errors).to.be.undefined;
				})
				.end(done);
		});
		it('Should get a starship based on an extract of his name', function(done) {
			doRequest(app, '{vehicleByName(name:"t-A"){name}}')
				.expect(200)
				.expect((response) => {
					expect(response.body.data.vehicleByName.length).to.be.deep.equal(1);
					const extractor = getFieldsExtractor('name');
					const expectedResult = extractor(expectedVehicles[0]);
					const actualResult = response.body.data.vehicleByName[0];
					expect(actualResult).to.be.deep.equal(expectedResult);
					expect(response.body.errors).to.be.undefined;
				})
				.end(done);
		});
		it('Should get an empty list when ask for a dummy name', function(done) {
			doRequest(app, '{vehicleByName(name:"donald bycicle"){name}}')
				.expect(200)
				.expect((response) => {
					expect(response.body.data.vehicleByName.length).to.be.deep.equal(0);
					expect(response.body.errors).to.be.undefined;
				})
				.end(done);
		});
		it('Should get an error when providing an invalid name', function(done) {
			doRequest(app, '{vehicleByName(name{name}}')
				.expect(200)
				.expect((response) => {
					expect(response.body.data).to.be.null;
					expect(response.body.errors).not.to.be.undefined;
				})
				.end(done);
		});
	});
});
